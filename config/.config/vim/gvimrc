" GVIM CONFIGURATION
" Only sourced by gvim, after sourcing vimrc

set t_Co=256
color PaperColor
set background=light
if has('gui_gtk2') || has('gui_gtk3')
  set guifont=Iosevka\ Term\ 12
elseif has('gui_win32')
  set guifont=Iosevka_NF:h12
endif
highlight Cursor guifg=white guibg=red
highlight iCursor guifg=black guibg=steelblue
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver20-iCursor
set statusline=
set statusline+=\ \ %f
set statusline+=\ %m
set statusline+=%=
set statusline+=%l:%c\ \ %p%%\ \ 
hi StatusLine guibg=grey70 guifg=#eeeeee
set lines=35 columns=90
set guioptions -=L
set guioptions -=r
set guioptions -=m
set guioptions -=T
set winaltkeys=no
set belloff=
set visualbell
set signcolumn=yes
unlet g:terminal_ansi_colors
highlight Terminal guifg='#282C34'
highlight Terminal guibg='#EEEEEE'

" Function to toggle window menu (F9)
function ToggleWindowMenu()
  if (&winaltkeys == 'yes')
    set winaltkeys=no   "turn off menu keys
    set guioptions -=m  "turn off menubar
    set guioptions -=T  "turn off icon toolbar
  else
    set winaltkeys=yes  "turn on menu keys
    set guioptions +=m  "turn on menubar
    set guioptions +=T  "turn on icon toolbar
  endif
endfunction
map <silent> <F9> :call ToggleWindowMenu()<CR>

" Restore window positions
source $VIMFILES/vimrc.d/restore_position.vim

" Set window to certain size (F10)
function! SetScreenSize()
  if has('gui_win32')
    if !exists("s:fullscr")
      let s:fullscr = 0
    endif
    if (s:fullscr == 1)
      WToggleFullscreen
      call ScreenRestore()
      let s:fullscr = 0
    endif
  endif
  set lines=35 columns=90
endfunction
nmap <silent> <F10> :call SetScreenSize()<CR>

" Fullscreen (F11/Alt-Enter)
function! ToggleFullScreen()
  if has('gui_gtk2') || has('gui_gtk3')
    call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
  elseif has('gui_win32')
    if !exists("s:fullscr")
      let s:fullscr = 0
    endif
    if (s:fullscr == 0)
      call ScreenSave()
      WToggleFullscreen
      let s:fullscr = 1
    elseif (s:fullscr == 1)
      WToggleFullscreen
      call ScreenRestore()
      let s:fullscr = 0
    endif
  endif
endfunction
map <silent> <F11> :call ToggleFullScreen()<CR>
set <M-CR>=\<ESC>\<CR>
map <silent> <M-CR> <F11><CR>

" Distraction-free mode (F12)
source $VIMFILES/vimrc.d/distraction_free_mode.vim
map <silent> <F12> :call ToggleDistractionFreeMode()<CR>

" Change font/window size using Ctrl+/-
" (return to original size with Ctrl-0)
if has('gui_gtk2') || has('gui_gtk3')
  let g:gf_size_orig = matchstr(&guifont, '\( \)\@<=\d\+$')
  function! FontSizePlus()
    let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
    if l:gf_size_whole < 28
      let l:gf_size_whole = l:gf_size_whole + 1
      let l:new_font_size = ' '.l:gf_size_whole
      let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
    endif
  endfunction
  function! FontSizeMinus()
    let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
    if l:gf_size_whole > 1
      let l:gf_size_whole = l:gf_size_whole - 1
      let l:new_font_size = ' '.l:gf_size_whole
      let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
    endif
  endfunction
  function! FontSizeOriginal()
    let &guifont = substitute(&guifont, ' \d\+$', ' '.g:gf_size_orig, '')
  endfunction
elseif has('gui_win32')
  let g:gf_size_orig = matchstr(&guifont, '\(:h\)\@<=\d\+$')
  function! FontSizePlus()
    let l:gf_size_whole = matchstr(&guifont, '\(:h\)\@<=\d\+$')
    if l:gf_size_whole < 28
      let l:gf_size_whole = l:gf_size_whole + 1
      let l:new_font_size = ':h'.l:gf_size_whole
      let &guifont = substitute(&guifont, ':h\d\+$', l:new_font_size, '')
    endif
  endfunction
  function! FontSizeMinus()
    let l:gf_size_whole = matchstr(&guifont, '\(:h\)\@<=\d\+$')
    if l:gf_size_whole > 1
      let l:gf_size_whole = l:gf_size_whole - 1
      let l:new_font_size = ':h'.l:gf_size_whole
      let &guifont = substitute(&guifont, ':h\d\+$', l:new_font_size, '')
    endif
  endfunction
  function! FontSizeOriginal()
    let &guifont = substitute(&guifont, ':h\d\+$', ':h'.g:gf_size_orig, '')
  endfunction
endif
if has('gui_running')
  nmap <C-=> :call FontSizePlus()<CR>
  nmap     :call FontSizeMinus()<CR>
  nmap <C-0> :call FontSizeOriginal()<CR>
endif
