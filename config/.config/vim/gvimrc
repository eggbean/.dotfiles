" GVIM CONFIGURATION
" Only sourced by gvim, after sourcing vimrc

if filereadable(expand('$VIMFILES/vimrc.d/guifont.gvim'))
  source $VIMFILES/vimrc.d/guifont.gvim
else
  if has('gui_gtk2') || has('gui_gtk3')
    set guifont=Iosevka\ Term\ 12
  elseif has('gui_win32')
    set guifont=Iosevka_NF:h12
  endif
endif

" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f
function! MyHighlights() abort
  highlight clear SignColumn
  set guicursor=n-v-c:block-Cursor
  set guicursor+=i:ver20-iCursor
  highlight Cursor guifg=white guibg=red
  highlight iCursor guifg=black guibg=steelblue
  highlight Normal guibg=#eeeeee
  highlight StatusLine guibg=#b2b2b2 guifg=#eeeeee
  highlight StatusLineNC guibg=#d0d0d0 guifg=#eeeeee
  highlight Terminal guifg='#282c34'
  highlight Terminal guibg='#e2e2e2'
  highlight StatusLineTerm ctermbg=24 ctermfg=254 guibg=#eeeeee guifg=#b2b2b2
  highlight StatusLineTermNC ctermbg=252 ctermfg=238 guibg=#eeeeee guifg=#d0d0d0
  if exists('g:terminal_ansi_colors')
    unlet g:terminal_ansi_colors
  endif
endfunction

augroup MyColors
  autocmd!
  autocmd ColorScheme * call MyHighlights()
augroup END

if filereadable(expand('$VIMFILES/vimrc.d/colorscheme.gvim'))
  source $VIMFILES/vimrc.d/colorscheme.gvim
else
  color PaperColor
endif
set background=light

set belloff=
set visualbell
set signcolumn=yes
set lines=35 columns=90
set statusline=
set statusline+=\ \ %f
set statusline+=\ %m
set statusline+=%=
set statusline+=%l:%c\ \ %p%%\ \ "
set guioptions -=L
set guioptions -=r
set guioptions -=m
set guioptions -=T
set winaltkeys=no

" Easier pasting in terminal
tmap <S-Insert> <C-W>"+

" Toggle window menu (F9)
function ToggleWindowMenu()
  if (&winaltkeys == 'yes')
    set winaltkeys=no   "turn off menu keys
    set guioptions -=m  "turn off menubar
    set guioptions -=T  "turn off icon toolbar
  else
    set winaltkeys=yes  "turn on menu keys
    set guioptions +=m  "turn on menubar
    set guioptions +=T  "turn on icon toolbar
  endif
endfunction
map <silent> <F9> :call ToggleWindowMenu()<CR>

" Restore window positions
" (this needs to be sourced before
" the following two functions)
source $VIMFILES/vimrc.d/restore_position.vim

" Set window to certain size (F10)
function! SetScreenSize()
  if has('gui_win32')
    if !exists("s:fullscr")
      let s:fullscr = 0
    endif
    if (s:fullscr == 1)
      WToggleFullscreen
      call ScreenRestore()
      let s:fullscr = 0
    endif
  endif
  set lines=35 columns=90
  WCenter
endfunction
nmap <silent> <F10> :call SetScreenSize()<CR>

" Fullscreen (F11/Alt-Enter)
function! ToggleFullScreen()
  if has('gui_gtk2') || has('gui_gtk3')
  " requires wmctrl installed
    call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
  elseif has('gui_win32')
  " requires kkoenig/wimproved.vim plugin
    if !exists("s:fullscr")
      let s:fullscr = 0
    endif
    if (s:fullscr == 0)
      call ScreenSave()
      WToggleFullscreen
      let s:fullscr = 1
    elseif (s:fullscr == 1)
      WToggleFullscreen
      call ScreenRestore()
      let s:fullscr = 0
    endif
  endif
endfunction
map <silent> <F11> :call ToggleFullScreen()<CR>
set <M-CR>=\<ESC>\<CR>
map <silent> <M-CR> <F11><CR>

" Distraction-free mode (F12)
source $VIMFILES/vimrc.d/distraction_free_mode.vim
map <silent> <F12> :call ToggleDistractionFreeMode()<CR>
