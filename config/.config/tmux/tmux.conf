## TMUX CONFIGURATION ##########################################################

# Start a non-login shell
if-shell -b '[ "$(uname -o)" != "Android" ]' \
    'set -g default-command "${SHELL}"'

# Keep ssh-agent working on reconnection by using symlink (requires ~/.ssh/rc)
set -g update-environment "DBUS_SESSION_BUS_ADDRESS DESKTOP_SESSION DISPLAY \
    GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPG_AGENT_INFO GPG_AGENT_INFO \
    ORIGCOLORTERM ORIGTERM SESSION_MANAGER SSH_AGENT_PID SSH_CONNECTION \
    WINDOWID XAUTHORITY XDG_SESSION_COOKIE XDG_SESSION_PATH" # removes SSH_AUTH_SOCK
set-environment -g SSH_AUTH_SOCK "$HOME/.ssh/ssh_auth_sock"

# Upgrade $TERM
if-shell '[[ $TERM =~ 256color]]' \
    'set -s default-terminal "tmux-256color";' \
    'set -sa terminal-overrides ",xterm*:Tc"'

# Address vim mode-switching delay
set -s escape-time 10

# Focus events enabled for terminals that support them
set -s focus-events on

# Set terminal title (remove session and window numbers)
set -g set-titles on
set -g set-titles-string "#W - \"#T\""

# Key bindings for copy-mode and status line command prompt
set -g mode-keys vi
set -g status-keys emacs

# Resize windows
set -g window-size latest
set -g aggressive-resize on

# Status line enabled (override default off setting in google cloud shell)
set -g status on
set -g status-position bottom

# Mouse on
set -g mouse on

# Increase scrollback buffer size
set -g history-limit 10000

# Turn off search wrap-around
set -g wrap-search off

# Refresh 'status-left' and 'status-right' more often
set -g status-interval 5

# Status line messages are displayed for 2.5 seconds
set -g display-time 2000

# Extend repeat time for pane resizing
set -g repeat-time 1000

# Display panes is displayed for 2.5 seconds
set -g display-panes-time 2500

# Renaming windows
set -g allow-rename on
set -g automatic-rename on

# Automatically renumber windows
set -g renumber-windows on

# Number windows and panes starting with 1 rather than 0
set -g base-index 1
set -g pane-base-index 1

# Automatically renumber sessions
set-hook -g session-created "run-shell $XDG_CONFIG_HOME/tmux/scripts/renumber-sessions.sh"
set-hook -g session-closed  "run-shell $XDG_CONFIG_HOME/tmux/scripts/renumber-sessions.sh"

# Alerts
set -g monitor-bell     on
set -g bell-action      any
set -g visual-bell      off
set -g monitor-activity off
set -g activity-action  other
set -g visual-activity  on
set -g monitor-silence  0
set -g silence-action   other
set -g visual-silence   on

# Cross-session alerts
set-hook -g alert-bell "run-shell $XDG_CONFIG_HOME/tmux/scripts/session-alert.sh"
set-hook -g client-session-changed "run-shell $XDG_CONFIG_HOME/tmux/scripts/session-alert.sh"

## KEY BINDINGS ----------------------------------------------------------------

prefixkey='C-\'                 # Prefix
newwindow='C-M-t'               # New window (no proceeding prefix)
leftwindow='C-PgUp'             # Switch to window on the left
rightwindow='C-PgDn'            # Switch to window on the right
movewindowleft='C-S-PgUp'       # Move window to the left
movewindowright='C-S-PgDn'      # Move window to the right
upperpane='C-M-Up'              # Switch to upper pane
lowerpane='C-M-Down'            # Switch to lower pane
leftpane='C-M-Left'             # Switch to left pane
rightpane='C-M-Right'           # Switch to right pane
upperinstance='C-M-PgUp'        # Go up to nested tmux instance
lowerinstance='C-M-PgDn'        # Go down to exit nested tmux instance

# Change prefix key from C-b to $prefixkey
unbind C-b
set -g prefix $prefixkey

# New window at current directory
bind -N "Create a new window at the current directory" -n $newwindow new-window -a -c "#{pane_current_path}"

# Prefix twice for last window
bind -N "Select the previously current window" $prefixkey last-window

# Clear window history
bind -N "Clear history" C-l send-keys -R \; clear-history

# 0 selects window 10, not 0
bind -N "Select window 10" 0   select-window -t :=10

# Resume automatic window naming after manual renaming
bind -N "Resume automatic window renaming" "M-<" set -u automatic-rename \; \
    display-message "automatic window renaming resumed"

# Do not start with current name when renaming window
bind -N "Rename current window" , command-prompt 'rename-window -- "%%"'

# Window-splitting (pane-splitting is now part of the POPUP SHELL configuration below)
bind -N "Split window horizontally" "\\" split-window -fh -c "#{pane_current_path}"
bind -N "Split window vertically"   "_"  split-window -fv -c "#{pane_current_path}"

# Additional window number bindings (this overwrites some default pane layout shortcuts)
bind -N "Select window 11" M-1 select-window -t :=11
bind -N "Select window 12" M-2 select-window -t :=12
bind -N "Select window 13" M-3 select-window -t :=13
bind -N "Select window 14" M-4 select-window -t :=14
bind -N "Select window 15" M-5 select-window -t :=15
bind -N "Select window 16" M-6 select-window -t :=16
bind -N "Select window 17" M-7 select-window -t :=17
bind -N "Select window 18" M-8 select-window -t :=18
bind -N "Select window 19" M-9 select-window -t :=19
bind -N "Select window 20" M-0 select-window -t :=20

# Window navigation (no prefix, no wrapping)
bind -N "Switch to the window on the left"  -n $leftwindow      if-shell -F '#{window_start_flag}'  '' 'prev'
bind -N "Switch to the window on the right" -n $rightwindow     if-shell -F '#{window_end_flag}'    '' 'next'
bind -N "Move window to the left"           -n $movewindowleft  if-shell -F '#{window_start_flag}'  '' 'swap-window -d -t :-1'
bind -N "Move window to the right"          -n $movewindowright if-shell -F '#{window_end_flag}'    '' 'swap-window -d -t :+1'

# Vim-like pane navigation with prefix (no wrapping)
bind -N "Select the pane to the left of the active pane"       h            if-shell -F '#{pane_at_left}'   '' 'select-pane -L'
bind -N "Select the pane below the active pane"                j            if-shell -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -N "Select the pane above the active pane"                k            if-shell -F '#{pane_at_top}'    '' 'select-pane -U'
bind -N "Select the pane to the right of the active pane"      l            if-shell -F '#{pane_at_right}'  '' 'select-pane -R'

# Pane navigation (no prefix, no wrapping) and with vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -N "Select the pane to the left of the active pane"    -n $leftpane  if-shell "$is_vim" 'send-keys C-M-h'  "if-shell -F '#{pane_at_left}'   '' 'select-pane -L'"
bind -N "Select the pane below the active pane"             -n $lowerpane if-shell "$is_vim" 'send-keys C-M-j'  "if-shell -F '#{pane_at_bottom}' '' 'select-pane -D'"
bind -N "Select the pane above the active pane"             -n $upperpane if-shell "$is_vim" 'send-keys C-M-k'  "if-shell -F '#{pane_at_top}'    '' 'select-pane -U'"
bind -N "Select the pane to the right of the active pane"   -n $rightpane if-shell "$is_vim" 'send-keys C-M-l'  "if-shell -F '#{pane_at_right}'  '' 'select-pane -R'"

# Vim-like pane navigation with vim-tmux-navigator (no prefix, no wrapping)
bind -N "Select the pane to the left of the active pane"    -n C-M-h    if-shell "$is_vim" 'send-keys C-M-h'  "if-shell -F '#{pane_at_left}'    '' 'select-pane -L'"
bind -N "Select the pane below the active pane"             -n C-M-j    if-shell "$is_vim" 'send-keys C-M-j'  "if-shell -F '#{pane_at_bottom}'  '' 'select-pane -D'"
bind -N "Select the pane above the active pane"             -n C-M-k    if-shell "$is_vim" 'send-keys C-M-k'  "if-shell -F '#{pane_at_top}'     '' 'select-pane -U'"
bind -N "Select the pane to the right of the active pane"   -n C-M-l    if-shell "$is_vim" 'send-keys C-M-l'  "if-shell -F '#{pane_at_right}'   '' 'select-pane -R'"

# Vim-like pane navigation in copy mode (no wrapping)
bind -T copy-mode-vi C-M-h      if-shell -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi C-M-j      if-shell -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi C-M-k      if-shell -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi C-M-l      if-shell -F '#{pane_at_right}'  '' 'select-pane -R'

# Switch back to last pane (replaces default so that zooming is retained)
bind -N "Move to the previously active pane" \; last-pane -Z

# Vim-like pane resizing
bind -N "Resize the pane left by 3"   -r M-h resize-pane -L 3
bind -N "Resize the pane down by 3"   -r M-j resize-pane -D 3
bind -N "Resize the pane up by 3"     -r M-k resize-pane -U 3
bind -N "Resize the pane right by 3"  -r M-l resize-pane -R 3

# Joining panes
bind -N "Join pane"       @ choose-window                        "join-pane -v -s '%%'"
bind -N "Join pane from:" < command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind -N "Send pane to:"   > command-prompt -p "send pane to:"    "join-pane -t '%%'"

# Choose window using fzf-panes
if-shell '[ -f $XDG_CONFIG_HOME/tmux/scripts/fzf-panes.sh ]' {
    set -g '@fzf_panes_ex_session_pat' '^(floating)$'
    set-hook -g pane-focus-in[10] \
    "run-shell -b 'bash $XDG_CONFIG_HOME/tmux/scripts/fzf-panes.sh update_mru_pane_ids'"
    bind -N "Choose a window using fzf" W run-shell -b 'bash $XDG_CONFIG_HOME/tmux/scripts/fzf-panes.sh new_window'
    bind -N "Move to the previous active pane or window" \; run-shell -b 'bash $XDG_CONFIG_HOME/tmux/scripts/fzf-panes.sh select_last_pane'
}

# Synchronise panes
bind -N "Synchronise panes" * set synchronize-panes \; \
    display-message "synchronised panes #{?pane_synchronized,on,off}"

# Toggle enable/disable input to pane using backtick key (below Escape)
bind -N "Toggle pane input" ` if-shell -F "#{pane_input_off}" 'select-pane -e' 'select-pane -d' \; \
    display-message "input to pane #{?pane_input_off,disabled,enabled}"

# Yank pane to new pane temporarily
bind -N "Yank pane to new pane" C-y {
    split-window -f -l 30% ''
    set-hook -p pane-mode-changed 'if-shell -F "#{!=:#{pane_mode},copy-mode}" "kill-pane"'
    copy-mode -s '{last}'
}

# Copying and pasting more like vim
bind -N "Paste the most recent paste buffer" P paste-buffer
bind -T copy-mode-vi v   send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-on
bind -T copy-mode-vi r   send-keys -X rectangle-toggle
bind -T copy-mode-vi y   send-keys -X copy-pipe "xclip -selection clipboard"
bind -T copy-mode-vi Y   send-keys -X copy-pipe-end-of-line "xclip -selection clipboard"
bind -T copy-mode-vi M-y send-keys -X copy-pipe-and-cancel "tmux paste-buffer"
bind -T copy-mode-vi M-Y send-keys -X copy-pipe-end-of-line-and-cancel "tmux paste-buffer"
unbind -T copy-mode-vi Space

# Delete the most recent paste buffer (instead of the '-' binding used for pane-splitting)
bind -N "Delete the most recent paste buffer" BSpace delete-buffer

# Kill window
bind -N "Kill the current window" X confirm-before -p "kill-window? (y/n)" kill-window

# Create new session
bind -N "Create a new session" S command-prompt 'new-session -s "%%"'

# Kill session with confirmation
bind -N "Kill the current session" C-x confirm-before -p "kill-session? (y/n)" kill-session

# List-keys with prefix-? in all modes
bind -N "List key bindings" -T prefix ? if-shell -F '#{pane_in_mode}' {
    if-shell -F '#{==:#{mode-keys},vi}' {
        list-keys -T copy-mode-vi
    } {
        list-keys -T copy-mode
    }
} {
    list-keys -N
}

# Double-click status-left to open new window
bind -n DoubleClick1StatusLeft new-window

# Edit tmux configuration easily
bind -N "Edit configuration" e new-window -n "$XDG_CONFIG_HOME/tmux/tmux.conf" "$EDITOR "$XDG_CONFIG_HOME/tmux/tmux.conf" && tmux source-file "$XDG_CONFIG_HOME/tmux/tmux.conf" && tmux display-message \"source-file done\""

# Reloads tmux configuration
bind -N "Reload configuration" R source-file "$XDG_CONFIG_HOME/tmux/tmux.conf" \; \
    display-message "source-file done"

## POPUP SHELL -----------------------------------------------------------------

bind -N "Toggle popup scratch terminal" C-Space if -F '#{==:#S,floating}' {
    detach-client
} {
    set -gF '@last_session_name' '#S'
    detach-client -s floating
    display-popup -d '#{pane_current_path}' -xC -yC -w70% -h70% -E 'tmux new-session -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
}

bind -N "Toggle popup scratch terminal" -n M-S-F2 if -F '#{==:#S,floating}' {
    detach-client
} {
    set -gF '@last_session_name' '#S'
    detach-client -s floating
    display-popup -d '#{pane_current_path}' -xC -yC -w70% -h70% -E 'tmux new-session -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
}

bind -N "Split pane/break popup horizontally" | if -F '#{!=:#S,floating}' {
    split-window -h -c '#{pane_current_path}'
} {
    set -uw pane-border-status
    run-shell "$XDG_CONFIG_HOME/tmux/scripts/fzf-panes.sh update_mru_pane_ids"
    run-shell 'bash -c "tmux join-pane -h -s floating -t \"$(tmux show-option -gvq '@last_session_name'):\""'
}

bind -N "Split pane/break popup vertically" - if -F '#{!=:#S,floating}' {
    split-window -v -c '#{pane_current_path}'
} {
    set -uw pane-border-status
    run-shell "$XDG_CONFIG_HOME/tmux/scripts/fzf-panes.sh update_mru_pane_ids"
    run-shell 'bash -c "tmux join-pane -v -s floating -t \"$(tmux show-option -gvq '@last_session_name'):\""'
}

bind -N "Break popup to a new window" M-! if -F '#{!=:#S,floating}' {
    break-pane
} {
    set -uw pane-border-status
    run-shell "$XDG_CONFIG_HOME/tmux/scripts/fzf-panes.sh update_mru_pane_ids"
    run-shell 'bash -c "tmux break-pane -s floating -t \"$(tmux show-option -gvq '@last_session_name'):\""'
}

## COLOURS ---------------------------------------------------------------------

set -g @zoomed          '#a3acc9'
set -g @active          '#6272a4'
set -g @inactive        '#3b4565'
set -g @bell            '#ff5555'
set -g @message         '#ff79c6'
set -g @copy            '#ffb86c'
set -g @prefix          '#50fa7b'
set -g @sync            '#8be9fd'
set -g @white           '#ffe4e1'
set -g @black           '#282a36'
set -g @activeborder    '#bd93f9'
set -g @inactiveborder  '#660de6'
set -g @markedpane      '#44475a'
set -g @vimactive       '#fad97c'
set -g @viminactive     black

## FORMATS AND STYLES ----------------------------------------------------------

# Nerd terminal font required
prefix_icon=''
copymode_icon=''
synced_icon=''

# Status line formats
set -g window-status-separator ""
set -g window-status-format " #I:#W#{?pane_synchronized,*,}#{?pane_marked,^,} "
set -g window-status-current-format " #I:#W#{?pane_synchronized,*,}#{?pane_marked,^,} "
set -g status-left " #{?client_prefix,$prefix_icon,#{?pane_in_mode,$copymode_icon,#{?pane_synchronized,$synced_icon,#{session_name}}}} "
set -g status-right " #(hostname -s) "

# Status line styles
set -g status-style "#{?#{==:#{@statusline},on},bg=#{@active},bg=#{@inactive}},fg=#{@black},bold"
set -g window-status-style "#{?#{==:#{@statusline},on},bg=#{@active},bg=#{@inactive}#,#{?window_zoomed_flag,fg=bold,}},fg=#{@black},nobold"
set -g window-status-current-style "fg=#{@white},nobold,bg=#{@active},#{?window_zoomed_flag,fg=bold,}"
set -g status-left-style "#{?#{==:#{@statusline},on},#{?#{==:#{@session-alert},on},bg=#{@bell},#{?client_prefix,bg=#{@prefix},#{?pane_in_mode,bg=#{@copy},bg=#{@activeborder},#{?pane_synchronized,bg=#{@sync},bg=#{@activeborder}}}}},bg=#{@inactive}}"
set -g status-right-style "#{?#{==:#{@statusline},on},#{?#{==:#{@session-alert},on},bg=#{@bell},#{?client_prefix,bg=#{@prefix},#{?pane_in_mode,bg=#{@copy},bg=#{@activeborder},#{?pane_synchronized,bg=#{@sync},bg=#{@activeborder}}}}},bg=#{@inactive}}"
set -g window-status-bell-style "fg=#{@black}#,bg=#{@bell}"

# Window styles
set -g window-style "#{?pane_marked,bg=#{@markedpane},}"
set -g window-active-style "#{?pane_marked,bg=#{@markedpane},}"

# Border styles
set -g pane-border-style "fg=#{@inactiveborder}"
set -g pane-active-border-style "fg=#{@activeborder}"

# Message style
set -g message-style "fg=#{@message}"

# Clock colour
set -g clock-mode-colour blue

# Copy-mode colour
set -g mode-style "bg=#{@copy},fg=#{@black}"
set -g copy-mode-match-style "bg=#{@activeborder},fg=#{@black}"
set -g copy-mode-current-match-style "bg=#{@sync},fg=#{@black}"
set -g copy-mode-mark-style "bg=#{@bell},fg=#{@black}"

## NESTED TMUX -----------------------------------------------------------------

set -g @statusline on
set -g @nested off

bind -n M-F12 {
    set -g @statusline on
    set -g @nested on
}

bind -n M-F11 {
    set -g @statusline off
}

bind -N "Go up to enter nested instance" -n $upperinstance if-shell -F '#{==:#{@nested},on}' '' {
    send-keys M-F12
    set -g @statusline off
    set key-table inactive
    set -g prefix NONE
}

bind -T inactive $lowerinstance {
    send-keys M-F11
    set -g @statusline on
    set key-table root
    set -g prefix $prefixkey
}

bind -N "Go down to exit nested instance" -n $lowerinstance ''

bind -T copy-mode    $upperinstance ''
bind -T copy-mode    $lowerinstance ''
bind -T copy-mode-vi $upperinstance ''
bind -T copy-mode-vi $lowerinstance ''

# Double-click inactive status to make active
bind -n DoubleClick1StatusDefault if-shell -F '#{==:#{@nested},on}' '' {
    send-keys M-F12
    set -g @statusline off
    set key-table inactive
    set -g prefix NONE
}

bind -T inactive DoubleClick1StatusDefault if-shell -F '#{==:#{@nested},on}' '' {
    send-keys M-F11
    set -g @statusline on
    set key-table root
    set -g prefix $prefixkey
}

## PLUGINS ---------------------------------------------------------------------

# Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tpm'
# Tmux-sidebar
set -g @plugin 'eggbean/tmux-sidebar#chdir'
set -g @sidebar-tree-command 'tree -Ca -I '.git''
set -g @sidebar-tree 'Tab'
set -g @sidebar-tree-focus 'BTab'
# Tmux-yank
set -g @plugin 'eggbean/tmux-yank#addkeys'
set -g @yank_action 'copy-pipe'
set -g @yank_with_mouse 'on'
# Tmux-resurrect
set -g @plugin 'eggbean/tmux-resurrect#add_key_note'
set -g @resurrect-processes 'ssh mosh-client bat'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-dir '~/.cache/tmux/tmux-resurrect'
# Tmux better mouse-mode
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @scroll-without-changing-pane 'on'
set -g @emulate-scroll-for-no-mouse-alternate-buffer 'on'
# Tmux-notify
set -g @plugin 'eggbean/tmux-notify#change_letter'
set -g @tnotify-sleep-duration 5
set -g @tnotify-verbose 'on'
# Tmux Facebook PathPicker
set -g @plugin 'tmux-plugins/tmux-fpp'
set -g @fpp-key '^'
# Tmux fzf-URL
set -g @plugin 'eggbean/tmux-fzf-url#addkey'
set -g @fzf-url-fzf-options '-w 50% -h 60% --multi -0 --no-preview --layout reverse --prompt "url: " --no-info --pointer ● --color "prompt:#bd93f9,pointer:#bd93f9"'
set -g @fzf-url-history-limit '50'
# Tmux-thumbs
set -g @plugin 'eggbean/tmux-thumbs#add_key_note'
set -g @thumbs-key '#'
# Tmux-jump
set -g @plugin 'schasse/tmux-jump'
set -g @jump-key 'J'
# Tmux-fuzzback
set -g @plugin 'roosta/tmux-fuzzback'
set -g @fuzzback-bind 'F'
set -g @fuzzback-popup 1
set -g @fuzzback-popup-size '90%'
set -g @fuzzback-fzf-layout 'default'
# Tmux-open
set -g @open-S 'https://www.google.com/search?q='
# Tmux-ssh-split
set -g @plugin 'pschmitt/tmux-ssh-split'
set -g @ssh-split-h-key "|"
set -g @ssh-split-v-key "-"
set -g @ssh-split-keep-cwd "true"
set -g @ssh-split-no-shell "false"
set -g @ssh-split-strip-cmd "true"
set -g @ssh-split-verbose "true"

if-shell '[ ! -d "$XDG_DATA_HOME/tmux/plugins/tpm" ]' \
    'run-shell "git clone https://github.com/tmux-plugins/tpm "$XDG_DATA_HOME/tmux/plugins/tpm""'
run-shell -b "$XDG_DATA_HOME/tmux/plugins/tpm/tpm"

# Conditionally download and load Tmux-open only on local client systems running xdg-open
if-shell '[ -x /bin/xdg-open ] && [ ! -d "$XDG_DATA_HOME/tmux/plugins/tmux-open" ]' \
    'run-shell "git clone https://github.com/tmux-plugins/tmux-open "$XDG_DATA_HOME/tmux/plugins/tmux-open""'
if-shell -b '[ -x /bin/xdg-open ]' \
    'run-shell -b "$XDG_DATA_HOME/tmux/plugins/tmux-open/open.tmux"'
