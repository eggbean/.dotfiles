## TMUX CONFIGURATION ##########################################################

# Start a non-login shell
set -g default-command "${SHELL}"

# Keep ssh-agent working on reconnection by using symlink (requires ~/.ssh/rc)
set -g update-environment "DBUS_SESSION_BUS_ADDRESS DESKTOP_SESSION DISPLAY \
	GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPG_AGENT_INFO GPG_AGENT_INFO \
	ORIGCOLORTERM ORIGTERM SESSION_MANAGER SSH_AGENT_PID SSH_CONNECTION \
	WINDOWID XAUTHORITY XDG_SESSION_COOKIE XDG_SESSION_PATH" # removes SSH_AUTH_SOCK
set-environment -g SSH_AUTH_SOCK "$HOME/.ssh/ssh_auth_sock"

# Upgrade $TERM for 256 colours
set -s default-terminal 'xterm-256color'
set -s terminal-overrides ',xterm*:Tc'
set -as terminal-overrides ",*:U8=0"

# Focus events enabled for terminals that support them
set -s focus-events on

# Address vim mode-switching delay
set -s escape-time 0

# Key bindings for copy-mode and status line command prompt
set -g mode-keys vi
set -g status-keys emacs

# Resize windows
set -g window-size latest
set -g aggressive-resize on

# Status line enabled (override default off setting in google cloud shell)
set -g status on
set -g status-position bottom

# Mouse on
set -g mouse on

# Increase scrollback buffer size
set -g history-limit 10000

# Refresh 'status-left' and 'status-right' more often
set -g status-interval 5

# Status line messages are displayed for 2.5 seconds
set -g display-time 2500

# Extend repeat time for pane resizing
set -g repeat-time 1000

# Display panes is displayed for 2.5 seconds
set -g display-panes-time 2500

# Set terminal title (remove session and window numbers prefix)
set -g set-titles on
set -g set-titles-string "#W - \"#T\""

# Renaming windows
set -g allow-rename on
set -g automatic-rename on

# Automatically renumber windows
set -g renumber-windows on

# Number windows and panes starting with 1 rather than 0
set -g base-index 1
set -g pane-base-index 1

# Automatically renumber sessions
set-hook -g session-created "run-shell $XDG_CONFIG_HOME/tmux/renumber-sessions.sh"
set-hook -g session-closed	"run-shell $XDG_CONFIG_HOME/tmux/renumber-sessions.sh"

# Alerts
set -g monitor-bell		on
set -g bell-action		any
set -g visual-bell		off
set -g monitor-activity	off
set -g activity-action	other
set -g visual-activity	on
set -g monitor-silence	0
set -g silence-action	other
set -g visual-silence	on

# Cross-session alerts
set-hook -g alert-bell "run-shell $XDG_CONFIG_HOME/tmux/session-alert.sh"
set-hook -g client-session-changed "run-shell $XDG_CONFIG_HOME/tmux/session-alert.sh"

# Turn off search wrap-around
set -g wrap-search off

## KEY BINDINGS ----------------------------------------------------------------

prefixkey='C-\'					# Prefix
newwindow='C-M-t'				# Shortcut for new window (no proceeding prefix)
leftwindow='C-PgUp'				# Switch to window on the left
rightwindow='C-PgDn'			# Switch to window on the right
movewindowleft='C-S-PgUp'		# Move window to the left
movewindowright='C-S-PgDn'		# Move window to the right
upperpane='C-M-Up'				# Switch to upper pane
lowerpane='C-M-Down'			# Switch to lower pane
leftpane='C-M-Left'				# Switch to left pane
rightpane='C-M-Right'			# Switch to right pane
upperinstance='C-M-PgUp'		# Go up to nested tmux instance
lowerinstance='C-M-PgDn'		# Go down to exit nested tmux instance

# Change prefix key from C-b to $prefixkey
unbind C-b
set -g prefix $prefixkey

# New window
bind -N "Create a new window at the current directory" -n $newwindow new-window -a -c "#{pane_current_path}"

# Prefix twice for last window
bind -N "Select the previously current window" $prefixkey last-window

# Clear window history
bind -N "Clear history" C-l send-keys -R \; clear-history

# Window navigation (no wrapping)
bind -N "Switch to the window on the left"	-n $leftwindow		if-shell -F '#{window_start_flag}'	'' 'prev'
bind -N "Switch to the window on the right"	-n $rightwindow		if-shell -F '#{window_end_flag}'	'' 'next'
bind -N "Move window to the left"			-n $movewindowleft	if-shell -F '#{window_start_flag}'	'' 'swap-window -d -t :-1'
bind -N "Move window to the right"			-n $movewindowright	if-shell -F '#{window_end_flag}'	'' 'swap-window -d -t :+1'

# 0 selects window 10, not 0
bind -N "Select window 10" 0   select-window -t :=10

# Additional window number bindings (this overwrites some default pane layout shortcuts)
bind -N "Select window 11" M-1 select-window -t :=11
bind -N "Select window 12" M-2 select-window -t :=12
bind -N "Select window 13" M-3 select-window -t :=13
bind -N "Select window 14" M-4 select-window -t :=14
bind -N "Select window 15" M-5 select-window -t :=15
bind -N "Select window 16" M-6 select-window -t :=16
bind -N "Select window 17" M-7 select-window -t :=17
bind -N "Select window 18" M-8 select-window -t :=18
bind -N "Select window 19" M-9 select-window -t :=19
bind -N "Select window 20" M-0 select-window -t :=20

# Resume automatic window naming after manual renaming
bind -N "Resume automatic window renaming" "M-<" set -u automatic-rename \; \
	display-message "automatic window renaming resumed"

# Allow windows to be moved to indexes already in use
#bind -N "Move the current window" . move-window # Need to fix

# Do not start with current name when renaming window
bind -N "Rename current window" , command-prompt 'rename-window -- "%%"'

# Delete the most recent paste buffer (replaces the '-' binding used for pane-splitting)
bind -N "Delete the most recent paste buffer" + delete-buffer

# Vim-like pane navigation with vim-tmux-navigator (no wrapping)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -N "Select the pane to the left of the active pane"	-n C-M-h	if-shell "$is_vim" 'send-keys C-M-h'	"if-shell -F '#{pane_at_left}'		'' 'select-pane -L'"
bind -N "Select the pane below the active pane"				-n C-M-j	if-shell "$is_vim" 'send-keys C-M-j'	"if-shell -F '#{pane_at_bottom}'	'' 'select-pane -D'"
bind -N "Select the pane above the active pane"				-n C-M-k	if-shell "$is_vim" 'send-keys C-M-k'	"if-shell -F '#{pane_at_top}'		'' 'select-pane -U'"
bind -N "Select the pane to the right of the active pane"	-n C-M-l	if-shell "$is_vim" 'send-keys C-M-l'	"if-shell -F '#{pane_at_right}'		'' 'select-pane -R'"
bind -N "Move to the previously active pane"				-n C-M-\;	if-shell "$is_vim" 'send-keys C-M-;'	'last-pane'

bind -T copy-mode-vi C-M-h		if-shell -F '#{pane_at_left}'	'' 'select-pane -L'
bind -T copy-mode-vi C-M-j		if-shell -F '#{pane_at_bottom}'	'' 'select-pane -D'
bind -T copy-mode-vi C-M-k		if-shell -F '#{pane_at_top}'	'' 'select-pane -U'
bind -T copy-mode-vi C-M-l		if-shell -F '#{pane_at_right}'	'' 'select-pane -R'
bind -T copy-mode-vi C-M-\;		select-pane -l # Need hack to make this work with this keybinding

# Pane navigation (no wrapping)
bind -N "Select the pane to the left of the active pane"	-n $leftpane	if-shell -F '#{pane_at_left}'	'' 'select-pane -L'
bind -N "Select the pane below the active pane"				-n $lowerpane	if-shell -F '#{pane_at_bottom}'	'' 'select-pane -D'
bind -N "Select the pane above the active pane"				-n $upperpane	if-shell -F '#{pane_at_top}'	'' 'select-pane -U'
bind -N "Select the pane to the right of the active pane"	-n $rightpane	if-shell -F '#{pane_at_right}'	'' 'select-pane -R'

# Copying and pasting more like vim
bind -N "Paste the most recent paste buffer" P paste-buffer
bind -T copy-mode-vi v   send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-on
bind -T copy-mode-vi r   send-keys -X rectangle-toggle
bind -T copy-mode-vi y   send-keys -X copy-pipe "xclip -selection clipboard"
unbind -T copy-mode-vi Space

# Switch back to last pane (replaces default so that zooming is retained)
bind -N "Move to the previously active pane" \; last-pane -Z

# Vim-like pane resizing
bind -N "Resize the pane left by 3"		-r M-h resize-pane -L 3
bind -N "Resize the pane down by 3"		-r M-j resize-pane -D 3
bind -N "Resize the pane up by 3"		-r M-k resize-pane -U 3
bind -N "Resize the pane right by 3"	-r M-l resize-pane -R 3

# Pane splitting
bind -N "Split pane horizontally"   "|"  split-window -h -c	 "#{pane_current_path}"
bind -N "Split window horizontally" "\\" split-window -fh -c "#{pane_current_path}"
bind -N "Split pane vertically"     "-"  split-window -v -c	 "#{pane_current_path}"
bind -N "Split window vertically"   "_"  split-window -fv -c "#{pane_current_path}"

# Join pane
bind -N "Join pane" @ choose-window 'join-pane -v -s "%%"'
bind -N "Join pane from:" > command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind -N "Send pane to:"   < command-prompt -p "send pane to:"    "join-pane -t '%%'"

# Synchronise panes
bind -N "Synchronise panes" * set synchronize-panes \; \
	display-message "synchronised panes #{?pane_synchronized,on,off}"

# Toggle enable/disable input to pane using the key below Escape
bind -N "Toggle pane input" ` if-shell -F "#{pane_input_off}" 'select-pane -e' 'select-pane -d' \; \
	display-message "input to pane #{?pane_input_off,disabled,enabled}"

# Yank pane to new pane
bind -N "Yank pane to new pane" C-y {
	split-window -f -l 30% ''
	set-hook -p pane-mode-changed 'if-shell -F "#{!=:#{pane_mode},copy-mode}" "kill-pane"'
	copy-mode -s '{last}'
}

# Reloads tmux configuration
bind -N "Reload configuration" R source-file "$XDG_CONFIG_HOME/tmux/tmux.conf" \; \
	display-message "source-file done"

# Kill window
bind -N "Kill the current window" X confirm-before -p "kill-window? (y/n)" kill-window

# Create new session
bind -N "Create a new session" S command-prompt 'new-session -s "%%"'

# Kill session
bind -N "Kill the current session" C-x confirm-before -p "kill-session? (y/n)" kill-session

# List-keys with prefix-? in all modes
bind -N "List key bindings" -T prefix ? if-shell -F '#{pane_in_mode}' {
	if-shell -F '#{==:#{mode-keys},vi}' {
		list-keys -T copy-mode-vi
	} {
		list-keys -T copy-mode
	}
} {
	list-keys -N
}

# Double-click status-left to open new window
bind -n DoubleClick1StatusLeft new-window

# Test
# set -s user-keys[1] "\e[88;5u"
# bind -n User1 display-message "HELLO!"

## COLOURS ---------------------------------------------------------------------

set -g @zoomed			colour33	# SteelBlue1
set -g @active			colour27	# DodgerBlue2
set -g @inactive		colour18	# DarkBlue
set -g @message			colour197	# DeepPink2
set -g @bell			colour210	# LightCoral
set -g @white			colour224	# MistyRose1
set -g @black			colour16	# Grey0 (v.dark)
set -g @activeborder	colour46	# Green1
set -g @inactiveborder	colour201	# Magenta1
set -g @markedpane		colour236	# Grey19
set -g @vimfile			colour220	# Gold1

## FORMATS AND STYLES ----------------------------------------------------------

# Status line formats
set -g window-status-separator " "
set -g window-status-format " #I:#W#{?pane_synchronized,*,}#{?pane_marked,^,} "
set -g window-status-current-format " #I:#W#{?pane_synchronized,*,}#{?pane_marked,^,} "
set -g status-right "#{prefix_highlight} #(hostname -f) "

# Status line styles
set -g status-style "#{?#{==:#{@statusline},off},bg=#{@inactive},bg=#{@active}},fg=#{@black}"
set -g window-status-style "#{?#{==:#{@statusline},off},bg=#{@inactive},bg=#{@active}#,#{?window_zoomed_flag,bg=#{@zoomed},}},fg=#{@black}"
set -g window-status-current-style "fg=#{@white},bg=#{@active},#{?window_zoomed_flag,bg=#{@zoomed},}"
set -g status-left-style "#{?#{==:#{@session-alert},on},bg=#{@bell},}"
set -g status-right-style "#{?#{==:#{@statusline},off},fg=#{@black},fg=#{@white}}"
set -g window-status-bell-style "fg=#{@black}#,bg=#{@bell}"

# Window styles
set -g window-style "#{?pane_marked,bg=#{@markedpane},}"
set -g window-active-style "#{?pane_marked,bg=#{@markedpane},}"

# Border styles
set -g pane-border-style "fg=#{@inactiveborder}"
set -g pane-active-border-style "fg=#{@activeborder}"

# Message style
set -g message-style "fg=#{@message}"

# Clock colour
set -g clock-mode-colour blue

# Copy-mode colour
set -g mode-style bg=yellow,fg=black
set -g copy-mode-match-style bg=cyan,fg=black
set -g copy-mode-current-match-style bg=magenta,fg=black
set -g copy-mode-mark-style bg=red,fg=black

## NESTED TMUX -----------------------------------------------------------------

set -g @statusline on
set -g @nested off

bind -n M-F12 {
	set -g @statusline on
	set -g @nested on
}

bind -n M-F11 {
	set -g @statusline off
}

bind -N "Go up to enter nested instance" -n $upperinstance if-shell -F '#{==:#{@nested},on}' '' {
	send-keys M-F12
	set -g @statusline off
	set key-table inactive
	set -g prefix NONE
}

bind -T inactive $lowerinstance {
	send-keys M-F11
	set -g @statusline on
	set key-table root
	set -g prefix $prefixkey
}

bind -N "Go down to exit nested instance" -n $lowerinstance ''

bind -T copy-mode		$upperinstance ''
bind -T copy-mode		$lowerinstance ''
bind -T copy-mode-vi	$upperinstance ''
bind -T copy-mode-vi	$lowerinstance ''

# Double-click inactive status to make active
bind -n DoubleClick1StatusDefault if-shell -F '#{==:#{@nested},on}' '' {
	send-keys M-F12
	set -g @statusline off
	set key-table inactive
	set -g prefix NONE
}

bind -T inactive DoubleClick1StatusDefault if-shell -F '#{==:#{@nested},on}' '' {
	send-keys M-F11
	set -g @statusline on
	set key-table root
	set -g prefix $prefixkey
}

## PLUGINS ---------------------------------------------------------------------

# Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sidebar'
	set -g @sidebar-tree-command 'tree -Ca -I '.git''
set -g @plugin 'tmux-plugins/tmux-yank'
	set -g @yank_action 'copy-pipe'
	set -g @yank_with_mouse 'on'
set -g @plugin 'tmux-plugins/tmux-fpp'
	set -g @fpp-key '^'
set -g @plugin 'tmux-plugins/tmux-resurrect'
	set -g @resurrect-processes 'ssh mosh-client bat'
	set -g @resurrect-strategy-nvim 'session'
	set -g @resurrect-capture-pane-contents 'on'
	set -g @resurrect-dir '~/.cache/tmux/resurrect'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
	set -g @prefix_highlight_fg 'black'
	set -g @prefix_highlight_bg 'yellow'
	set -g @prefix_highlight_prefix_prompt ''
	set -g @prefix_highlight_show_copy_mode 'on'
	set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow'
	set -g @prefix_highlight_copy_prompt ''
	set -g @prefix_highlight_show_sync_mode 'on'
	set -g @prefix_highlight_sync_mode_attr 'fg=black,bg=yellow'
	set -g @prefix_highlight_sync_prompt ''
# set -g @plugin 'junegunn/tmux-fzf-url'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'wfxr/tmux-fzf-url'
	set -g @fzf-url-bind 'u'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
	set -g @scroll-without-changing-pane 'on'
	set -g @emulate-scroll-for-no-mouse-alternate-buffer 'on'

if-shell '[ ! -d "$TMUX_PLUGIN_MANAGER_PATH/tpm" ]' \
	'run-shell "git clone https://github.com/tmux-plugins/tpm "$TMUX_PLUGIN_MANAGER_PATH/tpm""'
run-shell -b "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm"

# Conditionally download and load tmux-open only on local client systems running xdg-open
if-shell '[ -x /bin/xdg-open ] && [ ! -d "$TMUX_PLUGIN_MANAGER_PATH/tmux-open" ]' \
	'run-shell "git clone https://github.com/tmux-plugins/tmux-open "$TMUX_PLUGIN_MANAGER_PATH/tmux-open""'
if-shell -b '[ -x /bin/xdg-open ]' \
	'run-shell -b "$TMUX_PLUGIN_MANAGER_PATH/tmux-open/open.tmux"'

